#include <iostream>
using namespace std;

int main( )
{
  int *ptr;

  cout << &(*ptr) <<endl;

  ptr = new int; 

  cout << &(*ptr) <<endl;

  *ptr = 8;

  cout << &ptr <<endl;
  cout << &(*ptr) <<endl;	
  cout << "ポインタ ptr の指すアドレスに保存されている値 = " << *ptr << endl;

  delete ptr;

  return 0;
}

/************************************************************************

<メモリ領域>

コード領域
スタック領域
静的データ領域
ヒープ領域


<ポインタを動的に確保する意味>

ポインタにキャストを行う場合、指定したアドレスがコード領域のように
書き込みできない領域のメモリアドレスの場合，ポインタを通して書き込みを
行う行為はエラーになる。

動的に確保するとはメモリ上のヒープ領域に変数やアドレスを確保する
ということである。ヒープ領域のメモリアドレスは書き込みも可能なので
このプログラムは正常に動作する。

また動的に確保する理由としてメモリ領域の容量の違いがある。
ヒープ領域はスタック領域に比べて容量が少ないため（ulimit -a）
大きなプログラムを作る場合には動的に確保する必要がある。

容量以外の理由として寿命の違いがある。
スタック領域などに作成されたデータは宣言した関数の終了と同時に解放される
が動的に確保されたデータはプログラムが終了するまでその値を保持する。
動的に確保されたメモリ領域は任意のタイミングで破棄できるためプログラムの
拡張性は高まるがセキュリティホールの危険性も高くなりバグを見つけにくく
なるため使用後には解放する必要がある。

************************************************************************/

